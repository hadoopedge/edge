List : A list is an ordered collection of elements that allows duplicate entries. Elements
in a list can be accessed by an int index.
ArrayList>Fast retrieval of elements(with index). O(1)

Set : A set is a collection that does not allow duplicate entries.
HashSet > fast O(1), No order
Tree Set > O(log n).sorted order

Queue : A queue is a collection that orders its elements in a specific order for processing.
A typical queue processes its elements in a first-in, first-out order, but other orderings
are possible.

Map : A map is a collection that maps keys to values, with no duplicate keys allowed.
The elements in a map are key/value pairs.

comparable/comparator
comparable: overwrite compareTo() inside the class(extending comparable) which we want to compare(String and wrapper classes  alreay having compareTo impleneted)<Collections.sort(empList);>
comparator: we declare a new class extending comparator and overwrite the compare method, thn while sorting we need to pass the comparatorClass as well.<Collections.sort(empList, AgeCompare);>

Comparable a Functional Interface?
Comparator is a functional interface because it has a single abstract method.