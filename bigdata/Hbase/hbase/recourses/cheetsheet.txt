@global default for the maximum number of versions kept for all newly-created columns, by setting <hbase.column.max.version> in hbase-site.xml.(HBase 0.98.2)
@Table create'emp1', {NAME =>'name', VERSIONS => 5}, {NAME =>'date', VERSIONS => 5}, {NAME =>'sex', VERSIONS => 5}
@columnfamily alter't1', NAME =>'f1', VERSIONS => 5
=============================
By default, when doing a get, the version with the biggest timestamp of each cell is returned (which may or may not be the latest one written, we can insert a data with an older timestamp).
get  'emp','10001', {COLUMN =>'name:name_first',  VERSIONS => 5}
COLUMN                                    CELL                                                                                                                   
 name:name_first                          timestamp=1514877409215, value=Georgi                                                                                  
 name:name_first                          timestamp=1514877339646, value=Georgi                                                                                  
 name:name_first                          timestamp=1514877216773, value=Georgi 
 put 'emp' ,'10001','name:name_first','koustav',1514877339646
 get  'emp','10001', {COLUMN =>'name:name_first',  VERSIONS => 5}
COLUMN                                    CELL                                                                                                                   
 name:name_first                          timestamp=1514877409215, value=Georgi                                                                                  
 name:name_first                          timestamp=1514877339650, value=koustav                                                                                 
 name:name_first                          timestamp=1514877339646, value=Georgi                                                                                  
 name:name_first                          timestamp=1514877216773, value=Georgi 
 get  'emp','10001', {COLUMN =>'name:name_first'}
COLUMN                                    CELL                                                                                                                   
 name:name_first                          timestamp=1514877409215, value=Georgi     
=============================
If while creating a table > Table already exists: emp!
But while deleting the table > ERROR: Table emp does not exist.

Then go to /usr/local/hbase/bin

./hbase zkcli
ls /hbase/table
rmr /hbase/table/emp
 
 or 
 hbase-clean.sh --cleanZk

 Google 'HBase zombie tables'
================================
When a write transaction (a set of puts or deletes) starts it retrieves the next highest transaction number. In HBase this is called a WriteNumber.
When a read transaction (a Scan or Get) starts it retrieves the transaction number of the last committed transaction. HBase calls this the ReadPoint.

The highlevel flow of a write transaction in HBase looks like this:
lock the row(s), to guard against concurrent writes to the same row(s)
retrieve the current writenumber
apply changes to the WAL (Write Ahead Log)
apply the changes to the Memstore (using the acquired writenumber to tag the KeyValues)
commit the transaction, i.e. attempt to roll the Readpoint forward to the acquired Writenumber.
unlock the row(s)
The highlevel flow of a read transaction looks like this:
open the scanner
get the current readpoint
filter all scanned KeyValues with memstore timestamp > the readpoint
close the scanner (this is initiated by the client)
==================================
Aim to have regions sized between 10 and 50 GB.
Aim to have cells no larger than 10 MB, or 50 MB if you use mob. Otherwise, consider storing your cell data in HDFS and store a pointer to the data in HBase.
A typical schema has between 1 and 3 column families per table. HBase tables should not be designed to mimic RDBMS tables.
Around 50-100 regions is a good number for a table with 1 or 2 column families. Remember that a region is a contiguous segment of a column family.
If only one column family is busy with writes, only that column family accomulates memory. Be aware of write patterns when allocating resources.
====================================
Hbase Data/memory ratio
regions.hbase.hregion.max.filesize /hbase.hregion.memstore.flush.size *dfs.replication * hbase.regionserver.global.memstore.lowerLimit
10GB regions
128MB memstores
HDFS replication factor of 3 
40% of the heap use for the memstores

Then: 10GB/128MB*3*0.4 = 96.
======================================